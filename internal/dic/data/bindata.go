// Code generated by go-bindata.
// sources:
// dic/ipa/ipa.dic.000
// dic/ipa/ipa.dic.001
// dic/ipa/ipa.dic.002
// dic/ipa/ipa.dic.003
// dic/uni/uni.dic.000
// dic/uni/uni.dic.001
// dic/uni/uni.dic.002
// dic/uni/uni.dic.003
// dic/uni/uni.dic.004
// dic/uni/uni.dic.005
// dic/uni/uni.dic.006
// dic/uni/uni.dic.007
// dic/uni/uni.dic.008
// dic/uni/uni.dic.009
// dic/uni/uni.dic.00a
// dic/uni/uni.dic.00b
// dic/uni/uni.dic.00c
// dic/uni/uni.dic.00d
// dic/uni/uni.dic.00e
// dic/uni/uni.dic.00f
// dic/uni/uni.dic.010
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	/*
	"dic/ipa/ipa.dic.000": dicIpaIpaDic000,
	"dic/ipa/ipa.dic.001": dicIpaIpaDic001,
	"dic/ipa/ipa.dic.002": dicIpaIpaDic002,
	"dic/ipa/ipa.dic.003": dicIpaIpaDic003,
	"dic/uni/uni.dic.000": dicUniUniDic000,
	"dic/uni/uni.dic.001": dicUniUniDic001,
	"dic/uni/uni.dic.002": dicUniUniDic002,
	"dic/uni/uni.dic.003": dicUniUniDic003,
	"dic/uni/uni.dic.004": dicUniUniDic004,
	"dic/uni/uni.dic.005": dicUniUniDic005,
	"dic/uni/uni.dic.006": dicUniUniDic006,
	"dic/uni/uni.dic.007": dicUniUniDic007,
	"dic/uni/uni.dic.008": dicUniUniDic008,
	"dic/uni/uni.dic.009": dicUniUniDic009,
	"dic/uni/uni.dic.00a": dicUniUniDic00a,
	"dic/uni/uni.dic.00b": dicUniUniDic00b,
	"dic/uni/uni.dic.00c": dicUniUniDic00c,
	"dic/uni/uni.dic.00d": dicUniUniDic00d,
	"dic/uni/uni.dic.00e": dicUniUniDic00e,
	"dic/uni/uni.dic.00f": dicUniUniDic00f,
	"dic/uni/uni.dic.010": dicUniUniDic010,
	*/
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"dic": &bintree{nil, map[string]*bintree{
		"ipa": &bintree{nil, map[string]*bintree{
			/*
			"ipa.dic.000": &bintree{dicIpaIpaDic000, map[string]*bintree{}},
			"ipa.dic.001": &bintree{dicIpaIpaDic001, map[string]*bintree{}},
			"ipa.dic.002": &bintree{dicIpaIpaDic002, map[string]*bintree{}},
			"ipa.dic.003": &bintree{dicIpaIpaDic003, map[string]*bintree{}},
			*/
		}},
		"uni": &bintree{nil, map[string]*bintree{
			/*
			"uni.dic.000": &bintree{dicUniUniDic000, map[string]*bintree{}},
			"uni.dic.001": &bintree{dicUniUniDic001, map[string]*bintree{}},
			"uni.dic.002": &bintree{dicUniUniDic002, map[string]*bintree{}},
			"uni.dic.003": &bintree{dicUniUniDic003, map[string]*bintree{}},
			"uni.dic.004": &bintree{dicUniUniDic004, map[string]*bintree{}},
			"uni.dic.005": &bintree{dicUniUniDic005, map[string]*bintree{}},
			"uni.dic.006": &bintree{dicUniUniDic006, map[string]*bintree{}},
			"uni.dic.007": &bintree{dicUniUniDic007, map[string]*bintree{}},
			"uni.dic.008": &bintree{dicUniUniDic008, map[string]*bintree{}},
			"uni.dic.009": &bintree{dicUniUniDic009, map[string]*bintree{}},
			"uni.dic.00a": &bintree{dicUniUniDic00a, map[string]*bintree{}},
			"uni.dic.00b": &bintree{dicUniUniDic00b, map[string]*bintree{}},
			"uni.dic.00c": &bintree{dicUniUniDic00c, map[string]*bintree{}},
			"uni.dic.00d": &bintree{dicUniUniDic00d, map[string]*bintree{}},
			"uni.dic.00e": &bintree{dicUniUniDic00e, map[string]*bintree{}},
			"uni.dic.00f": &bintree{dicUniUniDic00f, map[string]*bintree{}},
			"uni.dic.010": &bintree{dicUniUniDic010, map[string]*bintree{}},
			*/
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
