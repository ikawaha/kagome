# =============================================================================
#  GoReleaser configuration file for Kagome
# =============================================================================
#  For local testing run:
#    goreleaser --skip-publish --clean --snapshot
#
#  Note:
#  To build multiarch Docker image, you may be required to install Docker buildx
#  plugin and QEMU.
env:
  - GO111MODULE=on

before:
  hooks:
    - go mod download

builds:
  - env:
      - CGO_ENABLED=0
    binary: kagome
    goos:
      - linux
      - darwin
      - windows
    goarch:
      - amd64
      - arm64
      - arm
    # Variant for ARM32
    goarm:
      - "5"
      - "6"
      - "7"
    # Ignore ARM32 build for both macOS and Windows
    ignore:
      - goos: darwin
        goarch: arm
      - goos: windows
        goarch: arm
    mod_timestamp: '{{ .CommitTimestamp }}'
    flags:
      - -trimpath
    ldflags:
      - -s -w -extldflags '-static' -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{ .CommitDate }} -X main.builtBy=goreleaser

# macOS universal binaries. It will join the binaries for AMD64 and Amd64 into
# a single binary. Suitable for Apple Silicon (Arm64) and Intel (amd64).
universal_binaries:
  -
    name_template: 'kagome'
    # Remove each after joining
    replace: true

brews:
  - tap:
      owner: ikawaha
      name: homebrew-kagome
    commit_author:
      name: goreleaserbot
      email: goreleaser@carlosbecker.com
    description: "Self-contained Japanese Morphological Analyzer written in pure Go."
    homepage: "https://github.com/ikawaha/kagome"
    folder: Formula
    install: |
      bin.install "kagome"
    test: |
      system "#{bin}/kagome version"

# Build Docker images. It will copy the built binary from the "builds" step above.
dockers:
  - image_templates:
      - "ikawaha/kagome:{{ .Version }}-amd64"
    use: buildx
    goarch: amd64
    dockerfile: Dockerfile
    build_flag_templates:
      - "--platform=linux/amd64"

  - image_templates:
      - "ikawaha/kagome:{{ .Version }}-arm64"
    use: buildx
    goarch: arm64
    dockerfile: Dockerfile
    build_flag_templates:
      - "--platform=linux/arm64/v8"

  - image_templates:
      - "ikawaha/kagome:{{ .Version }}-arm32v5"
    use: buildx
    goarch: arm
    goarm: 5
    dockerfile: Dockerfile
    build_flag_templates:
      - "--platform=linux/arm/v5"

  - image_templates:
      - "ikawaha/kagome:{{ .Version }}-arm32v6"
    use: buildx
    goarch: arm
    goarm: 6
    dockerfile: Dockerfile
    build_flag_templates:
      - "--platform=linux/arm/v6"

  - image_templates:
      - "ikawaha/kagome:{{ .Version }}-arm32v7"
    use: buildx
    goarch: arm
    goarm: 7
    dockerfile: Dockerfile
    build_flag_templates:
      - "--platform=linux/arm/v7"

# Create multiarch manifest file of Docker image. This will bind all the images
# above into a single manifest file for "latest" and each version tag.
docker_manifests:
  - name_template: ikawaha/kagome:{{ .Version }}
    image_templates:
      - ikawaha/kagome:{{ .Version }}-amd64
      - ikawaha/kagome:{{ .Version }}-arm64
      - ikawaha/kagome:{{ .Version }}-arm32v5
      - ikawaha/kagome:{{ .Version }}-arm32v6
      - ikawaha/kagome:{{ .Version }}-arm32v7
  - name_template: ikawaha/kagome:latest
    image_templates:
      - ikawaha/kagome:{{ .Version }}-amd64
      - ikawaha/kagome:{{ .Version }}-arm64
      - ikawaha/kagome:{{ .Version }}-arm32v5
      - ikawaha/kagome:{{ .Version }}-arm32v6
      - ikawaha/kagome:{{ .Version }}-arm32v7